Rtimes = read.csv("OCBN/MultiQuant/Lundbeck01_46-54_RT.txt")
Rtimes = read.csv("OCBN/MultiQuant/Lundbeck01_46-54_RT.csv")
Rtimes = read.csv("~/OCBN/MultiQuant/Lundbeck01_46-54_RT.csv")
getwd()
Rtimes = read.csv("~/Documents/OCBN/MultiQuant/Lundbeck01_46-54_RT.csv")
Rtimes = read.csv("/Documents/OCBN/MultiQuant/Lundbeck01_46-54_RT.csv")
Rtimes = read.csv("/Users/kristenlutz/Documents/OCBN/MultiQuant/Lundbeck01_46-54_RT.csv")
Rtimes = read.csv("Lundbeck01_46-54_RT.csv")
Rtimes = read.csv(Documents/Lundbeck01_46-54_RT.csv)
Rtimes = read.csv("Documents/Lundbeck01_46-54_RT.csv")
Rtimes
Rtimes = read.csv("Documents/Lundbeck01_46-54_RT.csv")
names(Rtimes)
Rtimes = read.tsv("Documents/Lundbeck01_46-54_RT.csv")
function (file, header = TRUE, sep = "\t",)
Rtimes = read.table("Documents/Lundbeck01_46-54_RT.csv", sep="\t", header=TRUE)
names(Rtimes)
my grouping <- function (x, y){#
    for (i in names(x))#
        if(i = [:alnum:]*_L"]){#
            print i#
        }#
}
my grouping <- function (x, y){#
    for (i in names(x))#
            print i#
        }#
}
my grouping <- function (x, y){#
    for (i in names(x))#
            return i#
        }#
}
my grouping <- function (x, y){#
    for (y in names(x))#
            return(y)#
        }#
}
grouping <- function (x, y){#
    for (y in names(x))#
            return(y)#
        }#
}
grouping <- function (x, y){#
    for (y in names(x))#
            return(y)#
}
x -> grouping(Rtimes)
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote="", fill=TRUE, na.strings="");
print rpIn
print rpIn;
rpIn
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt",  col.names=c("name", "val1"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote="", fill=TRUE, na.strings="");
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote="", fill=TRUE, na.strings="");
rpIn
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=" :", quote="", fill=TRUE, na.strings="");
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote="", fill=TRUE, na.strings="");
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=" :", quote="", fill=TRUE, na.strings="");
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote="", fill=TRUE, na.strings="");
rpIn
rpIn[0][0]
rpIn[1][1]
rpIn[1][0]
rpIn[1]
rpIn[1][1]
rpIn[1,1]
split(rpIn[1,1], "=")
split(rpIn[1,1], "=", drop)
split(rpIn[1,1], "=", drop=FALSE)
split(rpIn[1,1], =, drop=FALSE)
strplit(rpIn[1,1], =, drop=FALSE)
strsplit(rpIn[1,1], =, drop=FALSE)
strsplit(rpIn[1,1], "=", drop=FALSE)
strsplit(rpIn[1,1], "=")
strsplit(rpIn[1,1], "=")[1]
strsplit(rpIn[1,1], "=")[2]
split(rpIn[1,1], "=")
strsplit(rpIn[1,1], "=")
c <- strsplit(rpIn[1,1], "=")
c
c[1]
c[.5]
unlist(c)
c[1,1]
c[1]
c[0]
c[2]
rpIn[1,1]
strSplit(rpIn[1,1],"=")
strsplit(rpIn[1,1],"=")
c <- strsplit(rpIn[1,1],"=")
c(1)
c(2)
c(1,1)
c[1]
c[1.0]
c[1,0]
c[1]
c <= strsplit(rpIn[1,1],"=")
c <, c(strsplit(rpIn[1,1],"="))
c <- c(strsplit(rpIn[1,1],"="))
c[1]
c = c(strsplit(rpIn[1,1],"="))
c[1]
c[2]
unlist(strsplit(rpIn[1,1], "="))
c <- unlist(strsplit(rpIn[1,1], "="))
c[1]
c[2]
rpIn[1]
rpIn[1,0]
rpIn[1,1]
rpIn[,1]
rpIn[1,2]
rpIn[1,1]
rpIn[1,1..2]
rpIn[1,2]
rpIn[1,1]
rpIn[1,2]
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote="", fill=TRUE, na.strings="");       ######### #
	c <- unlist(strsplit(rpIn[1,1], "="));#
	rpIn[1,1] = c[1];#
	rpIn[1,2] = c[2];
spIn
rpIn
rpIn[1,]
rpIn[,1]
gsub(";Version", "_", rpIn[,1])
gsub(";Version", "_version", rpIn[,1])
rpIn[,1] = gsub(";Version", "_version", rpIn[,1])#
	rpIn[,1] = gsub(" ", "_", rpIn[,1])
rpIn
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt.new",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote="", fill=TRUE, na.strings="");
rpIn
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt.new",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote='"', fill=TRUE, na.strings="");
rpIn
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt.new",  col.names=c("key", "val"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote='"', fill=TRUE, na.strings="");
rpIn
params<- list(inputPathUploadedFile = rpIn$val1[rpIn$name=="runDataUploadedFile"],#
		inputPathValidated = rpIn$val1[rpIn$name=="runDataFile"],#
		##a little strange.  AssayRunTSVData is the one we need to output to#
		outputPath = rpIn$val3[rpIn$name=="runDataFile"],#
		containerPath = rpIn$val1[rpIn$name=="containerPath"], #
		runPropsOutputPath = rpIn$val1[rpIn$name=="transformedRunPropertiesFile"],#
		sampleSetId = as.integer(rpIn$val1[rpIn$name=="sampleSet"]),#
		probeSourceId = as.integer(rpIn$val1[rpIn$name=="probeSource"]),#
		errorsFile = rpIn$val1[rpIn$name=="errorsFile"])
params
rpIn<- read.table("/Users/kristenlutz/Desktop/labkey files/IonTorrent Example/batch_analysis_results_2016-02-03 07-25/IND215_R1_BC9_145667___76e6fb1a-d9d6-4c65-b95e-3be26710d4be/Workflow_Settings/Analysis_Settings/analysis_settings.txt.new",  col.names=c("name", "val1", "val2", "val3"),              ##########
		header=FALSE, check.names=FALSE,                                             ##  1  ##  #
		stringsAsFactors=FALSE, sep=":", quote='"', fill=TRUE, na.strings="");
inputPathValidated = rpIn$val1[rpIn$name=="runDataFile"]
inputPathValidated
library('ggplot2') # visualization#
library('ggthemes') # visualization#
library('scales') # visualization#
library('dplyr') # data manipulation#
library('mice') # imputation#
library('randomForest') # classification algorithm
getwd()
train <- read.csv('~/Titanic/input/train.csv', stringsAsFactors = F)
train <- read.csv('~/titanic/input/train.csv', stringsAsFactors = F)
train <- read.csv('~/R/titanic/input/train.csv', stringsAsFactors = F)
train <- read.csv('~/R/Titanic/input/train.csv', stringsAsFactors = F)
test  <- read.csv('..R/Titanic/input/test.csv', stringsAsFactors = F)
test  <- read.csv('.R/Titanic/input/test.csv', stringsAsFactors = F)
test  <- read.csv('~/R/Titanic/input/test.csv', stringsAsFactors = F)
test  <- read.csv('~/Projects/R/Titanic/input/test.csv', stringsAsFactors = F)
test
train  <- read.csv('~/Projects/R/Titanic/input/train.csv', stringsAsFactors = F)
full  <- bind_rows(train, test) # bind training & test data
full
train
test
test[0]
train[0]
full[0]
418+891
str(full)
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
table(full$Sex, full$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', #
                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
full$Title[full$Title == 'Mlle']        <- 'Miss' #
full$Title[full$Title == 'Ms']          <- 'Miss'#
full$Title[full$Title == 'Mme']         <- 'Mrs' #
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name,  #
                      function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Surname
full
cat(paste('We have <b>', nlevels(factor(full$Surname)), '</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.'))
str(full)
# Create a family size variable including the passenger themselves#
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep='_')
str(full)
# Use ggplot2 to visualize the relationship between family size & survival#
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +#
  geom_bar(stat='count', position='dodge') +#
  scale_x_continuous(breaks=c(1:11)) +#
  labs(x = 'Family Size') +#
  theme_few()
# Discretize family size#
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
# Show family size by survival using a mosaic plot#
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
str(full)
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
# Show family size by survival using a mosaic plot#
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
str(full)
mosaicplot(table(full$Family, full$Survived), main='Family Size by Survival', shade=TRUE)
# Show family size by survival using a mosaic plot#
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
# This variable appears to have a lot of missing values#
full$Cabin[1:28]
# The first character is the deck. For example:#
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full$Deck
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full$Deck
# Passengers 62 and 830 are missing Embarkment#
full[c(62, 830), 'Embarked']
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', full[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', full[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', full[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))
# Get rid of our missing passenger IDs#
embark_fare <- full %>%#
  filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +#
  geom_boxplot() +#
  geom_hline(aes(yintercept=80), #
    colour='red', linetype='dashed', lwd=2) +#
  scale_y_continuous(labels=dollar_format()) +#
  theme_few()
# Since their fare was $80 for 1st class, they most likely embarked from 'C'#
full$Embarked[c(62, 830)] <- 'C'
# Show row 1044#
full[1044, ]
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], #
  aes(x = Fare)) +#
  geom_density(fill = '#99d6ff', alpha=0.4) + #
  geom_vline(aes(xintercept=median(Fare, na.rm=T)),#
    colour='red', linetype='dashed', lwd=1) +#
  scale_x_continuous(labels=dollar_format()) +#
  theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], #
  aes(x = Fare)) +#
  geom_density(fill = '#99d6ff', alpha=0.4) + #
  geom_vline(aes(xintercept=median(Fare, na.rm=T)),#
    colour='red', linetype='dashed', lwd=1) +#
  scale_x_continuous(labels=dollar_format()) +#
  theme_few()
full$Fare[1044]
median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
